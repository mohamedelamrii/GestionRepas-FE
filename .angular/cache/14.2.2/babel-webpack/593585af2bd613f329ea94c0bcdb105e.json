{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { PlanningExecutionDto } from 'src/app/controller/model/PlanningExecution.model';\nimport { environment } from 'src/environments/environment';\nimport { PlanningRepasDto } from 'src/app/controller/model/PlanningRepas.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"src/app/controller/service/PlanningExecution.service\";\nimport * as i3 from \"src/app/controller/service/StringUtil.service\";\nimport * as i4 from \"src/app/controller/service/role.service\";\nimport * as i5 from \"primeng/api\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"src/app/controller/service/PlanningRepas.service\";\nimport * as i8 from \"primeng/button\";\nimport * as i9 from \"primeng/dialog\";\nimport * as i10 from \"@angular/forms\";\nimport * as i11 from \"primeng/dropdown\";\nimport * as i12 from \"primeng/tabview\";\nimport * as i13 from \"primeng/inputtextarea\";\nimport * as i14 from \"primeng/calendar\";\nimport * as i15 from \"primeng/inputnumber\";\nimport * as i16 from \"../../planning-repas-admin/create-admin/planning-repas-create-admin.component\";\n\nfunction PlanningExecutionCreateAdminComponent_ng_template_1_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 19);\n    i0.ɵɵtext(1, \"DatePlanningExecution est obligatoire.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PlanningExecutionCreateAdminComponent_ng_template_1_small_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 19);\n    i0.ɵɵtext(1, \"QuantiteExecution est obligatoire.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"ng-invalid ng-dirty\": a0\n  };\n};\n\nfunction PlanningExecutionCreateAdminComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p-tabView\")(1, \"p-tabPanel\", 3)(2, \"div\", 4)(3, \"div\", 5)(4, \"label\", 6);\n    i0.ɵɵtext(5, \"Date planning execution\");\n    i0.ɵɵelementStart(6, \"span\", 7);\n    i0.ɵɵtext(7, \"*\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"p-calendar\", 8);\n    i0.ɵɵlistener(\"ngModelChange\", function PlanningExecutionCreateAdminComponent_ng_template_1_Template_p_calendar_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.selectedPlanningExecution.datePlanningExecution = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, PlanningExecutionCreateAdminComponent_ng_template_1_small_9_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 10);\n    i0.ɵɵtext(12, \"Quantite execution\");\n    i0.ɵɵelementStart(13, \"span\", 7);\n    i0.ɵɵtext(14, \"*\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"p-inputNumber\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function PlanningExecutionCreateAdminComponent_ng_template_1_Template_p_inputNumber_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.selectedPlanningExecution.quantiteExecution = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, PlanningExecutionCreateAdminComponent_ng_template_1_small_16_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 12)(18, \"label\", 13);\n    i0.ɵɵtext(19, \"Planning repas\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"p-dropdown\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function PlanningExecutionCreateAdminComponent_ng_template_1_Template_p_dropdown_ngModelChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.selectedPlanningExecution.planningRepas = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"div\", 15);\n    i0.ɵɵelement(22, \"label\");\n    i0.ɵɵelementStart(23, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function PlanningExecutionCreateAdminComponent_ng_template_1_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.openCreatePlanningRepas(\"planningRepas\"));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"div\", 5)(25, \"label\", 17);\n    i0.ɵɵtext(26, \"Commentaire\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"textarea\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function PlanningExecutionCreateAdminComponent_ng_template_1_Template_textarea_ngModelChange_27_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.selectedPlanningExecution.commentaire = $event);\n    });\n    i0.ɵɵelementEnd()()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵpropertyInterpolate(\"dateFormat\", ctx_r0.dateFormat);\n    i0.ɵɵproperty(\"showTime\", true)(\"showSeconds\", false)(\"ngModel\", ctx_r0.selectedPlanningExecution.datePlanningExecution)(\"ngClass\", i0.ɵɵpureFunction1(14, _c0, !ctx_r0.validPlanningExecutionDatePlanningExecution));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.validPlanningExecutionDatePlanningExecution);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedPlanningExecution.quantiteExecution)(\"ngClass\", i0.ɵɵpureFunction1(16, _c0, !ctx_r0.validPlanningExecutionQuantiteExecution));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.validPlanningExecutionQuantiteExecution);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"options\", ctx_r0.planningRepass)(\"ngModel\", ctx_r0.selectedPlanningExecution.planningRepas)(\"filter\", true)(\"showClear\", true);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedPlanningExecution.commentaire);\n  }\n}\n\nfunction PlanningExecutionCreateAdminComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\")(2, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function PlanningExecutionCreateAdminComponent_ng_template_2_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.hideCreateDialog());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"div\")(4, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function PlanningExecutionCreateAdminComponent_ng_template_2_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.save());\n    });\n    i0.ɵɵelementEnd()()();\n  }\n}\n\nconst _c1 = function () {\n  return {\n    width: \"70vw\"\n  };\n};\n\nexport let PlanningExecutionCreateAdminComponent = /*#__PURE__*/(() => {\n  class PlanningExecutionCreateAdminComponent {\n    constructor(datePipe, planningExecutionService, stringUtilService, roleService, messageService, router, planningRepasService) {\n      this.datePipe = datePipe;\n      this.planningExecutionService = planningExecutionService;\n      this.stringUtilService = stringUtilService;\n      this.roleService = roleService;\n      this.messageService = messageService;\n      this.router = router;\n      this.planningRepasService = planningRepasService;\n      this._submitted = false;\n      this._errorMessages = new Array();\n      this._validPlanningExecutionDatePlanningExecution = true;\n      this._validPlanningExecutionQuantiteExecution = true;\n      this._validPlanningRepasQuantite = true;\n    }\n\n    ngOnInit() {\n      this.selectedPlanningRepas = new PlanningRepasDto();\n      this.planningRepasService.findAll().subscribe(data => this.planningRepass = data);\n    }\n\n    setValidation(value) {\n      this.validPlanningExecutionDatePlanningExecution = value;\n      this.validPlanningExecutionQuantiteExecution = value;\n    }\n\n    save() {\n      this.submitted = true;\n      this.validateForm();\n\n      if (this.errorMessages.length === 0) {\n        this.saveWithShowOption(false);\n      } else {\n        this.messageService.add({\n          severity: 'error',\n          summary: 'Erreurs',\n          detail: 'Merci de corrigé les erreurs sur le formulaire'\n        });\n      }\n    }\n\n    saveWithShowOption(showList) {\n      this.planningExecutionService.save().subscribe(planningExecution => {\n        if (planningExecution != null) {\n          this.planningExecutions.push(Object.assign({}, planningExecution));\n          this.createPlanningExecutionDialog = false;\n          this.submitted = false;\n          this.selectedPlanningExecution = new PlanningExecutionDto();\n        } else {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Erreurs',\n            detail: 'Planning execution existe déjà'\n          });\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    validateForm() {\n      this.errorMessages = new Array();\n      this.validatePlanningExecutionDatePlanningExecution();\n      this.validatePlanningExecutionQuantiteExecution();\n    }\n\n    validatePlanningExecutionDatePlanningExecution() {\n      if (this.stringUtilService.isEmpty(this.selectedPlanningExecution.datePlanningExecution)) {\n        this.errorMessages.push('Date planning execution non valide');\n        this.validPlanningExecutionDatePlanningExecution = false;\n      } else {\n        this.validPlanningExecutionDatePlanningExecution = true;\n      }\n    }\n\n    validatePlanningExecutionQuantiteExecution() {\n      if (this.stringUtilService.isEmpty(this.selectedPlanningExecution.quantiteExecution)) {\n        this.errorMessages.push('Quantite execution non valide');\n        this.validPlanningExecutionQuantiteExecution = false;\n      } else {\n        this.validPlanningExecutionQuantiteExecution = true;\n      }\n    }\n\n    openCreatePlanningRepas(planningRepas) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const isPermistted = yield this.roleService.isPermitted('PlanningRepas', 'add');\n\n        if (isPermistted) {\n          this.selectedPlanningRepas = new PlanningRepasDto();\n          this.createPlanningRepasDialog = true;\n        } else {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'erreur',\n            detail: 'problème de permission'\n          });\n        }\n      });\n    }\n\n    hideCreateDialog() {\n      this.createPlanningExecutionDialog = false;\n      this.setValidation(true);\n    }\n\n    get planningExecutions() {\n      return this.planningExecutionService.planningExecutions;\n    }\n\n    set planningExecutions(value) {\n      this.planningExecutionService.planningExecutions = value;\n    }\n\n    get selectedPlanningExecution() {\n      return this.planningExecutionService.selectedPlanningExecution;\n    }\n\n    set selectedPlanningExecution(value) {\n      this.planningExecutionService.selectedPlanningExecution = value;\n    }\n\n    get createPlanningExecutionDialog() {\n      return this.planningExecutionService.createPlanningExecutionDialog;\n    }\n\n    set createPlanningExecutionDialog(value) {\n      this.planningExecutionService.createPlanningExecutionDialog = value;\n    }\n\n    get selectedPlanningRepas() {\n      return this.planningRepasService.selectedPlanningRepas;\n    }\n\n    set selectedPlanningRepas(value) {\n      this.planningRepasService.selectedPlanningRepas = value;\n    }\n\n    get planningRepass() {\n      return this.planningRepasService.planningRepass;\n    }\n\n    set planningRepass(value) {\n      this.planningRepasService.planningRepass = value;\n    }\n\n    get createPlanningRepasDialog() {\n      return this.planningRepasService.createPlanningRepasDialog;\n    }\n\n    set createPlanningRepasDialog(value) {\n      this.planningRepasService.createPlanningRepasDialog = value;\n    }\n\n    get dateFormat() {\n      return environment.dateFormatCreate;\n    }\n\n    get dateFormatColumn() {\n      return environment.dateFormatCreate;\n    }\n\n    get submitted() {\n      return this._submitted;\n    }\n\n    set submitted(value) {\n      this._submitted = value;\n    }\n\n    get errorMessages() {\n      return this._errorMessages;\n    }\n\n    set errorMessages(value) {\n      this._errorMessages = value;\n    }\n\n    get validPlanningExecutionDatePlanningExecution() {\n      return this._validPlanningExecutionDatePlanningExecution;\n    }\n\n    set validPlanningExecutionDatePlanningExecution(value) {\n      this._validPlanningExecutionDatePlanningExecution = value;\n    }\n\n    get validPlanningExecutionQuantiteExecution() {\n      return this._validPlanningExecutionQuantiteExecution;\n    }\n\n    set validPlanningExecutionQuantiteExecution(value) {\n      this._validPlanningExecutionQuantiteExecution = value;\n    }\n\n    get validPlanningRepasQuantite() {\n      return this._validPlanningRepasQuantite;\n    }\n\n    set validPlanningRepasQuantite(value) {\n      this._validPlanningRepasQuantite = value;\n    }\n\n  }\n\n  PlanningExecutionCreateAdminComponent.ɵfac = function PlanningExecutionCreateAdminComponent_Factory(t) {\n    return new (t || PlanningExecutionCreateAdminComponent)(i0.ɵɵdirectiveInject(i1.DatePipe), i0.ɵɵdirectiveInject(i2.PlanningExecutionService), i0.ɵɵdirectiveInject(i3.StringUtilService), i0.ɵɵdirectiveInject(i4.RoleService), i0.ɵɵdirectiveInject(i5.MessageService), i0.ɵɵdirectiveInject(i6.Router), i0.ɵɵdirectiveInject(i7.PlanningRepasService));\n  };\n\n  PlanningExecutionCreateAdminComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PlanningExecutionCreateAdminComponent,\n    selectors: [[\"app-planning-execution-create-admin\"]],\n    decls: 4,\n    vars: 8,\n    consts: [[\"header\", \"Planning execution\", \"styleClass\", \"p-fluid\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"content\"], [\"pTemplate\", \"footer\"], [\"header\", \"Planning execution\"], [1, \"p-grid\"], [1, \"p-field\", \"p-col-12\", \"p-md-6\"], [\"for\", \"1\"], [2, \"color\", \"red\"], [\"id\", \"1\", \"placeholder\", \"Date planning execution\", 3, \"showTime\", \"showSeconds\", \"ngModel\", \"dateFormat\", \"ngClass\", \"ngModelChange\"], [\"class\", \"p-error\", 4, \"ngIf\"], [\"for\", \"2\"], [\"id\", \"2\", \"placeholder\", \"Quantite execution\", 1, \"p-mb-2\", \"p-mr-2\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [1, \"p-field\", \"p-col-11\", \"p-md-5\"], [\"for\", \"3\"], [\"id\", \"3\", \"filterMatchMode\", \"contains\", \"optionLabel\", \"id\", \"placeholder\", \"Planning repas\", 3, \"options\", \"ngModel\", \"filter\", \"showClear\", \"ngModelChange\"], [1, \"p-col-1\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-plus\", 1, \"p-button-success\", \"one-colonne-btn-success-align\", 3, \"click\"], [\"for\", \"4\"], [\"id\", \"4\", \"pInputTextarea\", \"\", \"rows\", \"5\", \"cols\", \"30\", \"placeholder\", \"Commentaire\", 3, \"ngModel\", \"ngModelChange\"], [1, \"p-error\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Annuler\", \"icon\", \"pi pi-times\", 1, \"p-button-text\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Valider\", \"icon\", \"pi pi-check\", 2, \"margin\", \"10px\", 3, \"click\"]],\n    template: function PlanningExecutionCreateAdminComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p-dialog\", 0);\n        i0.ɵɵlistener(\"visibleChange\", function PlanningExecutionCreateAdminComponent_Template_p_dialog_visibleChange_0_listener($event) {\n          return ctx.createPlanningExecutionDialog = $event;\n        });\n        i0.ɵɵtemplate(1, PlanningExecutionCreateAdminComponent_ng_template_1_Template, 28, 18, \"ng-template\", 1);\n        i0.ɵɵtemplate(2, PlanningExecutionCreateAdminComponent_ng_template_2_Template, 5, 0, \"ng-template\", 2);\n        i0.ɵɵelement(3, \"app-planning-repas-create-admin\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(7, _c1));\n        i0.ɵɵproperty(\"visible\", ctx.createPlanningExecutionDialog)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgIf, i5.PrimeTemplate, i8.ButtonDirective, i9.Dialog, i10.DefaultValueAccessor, i10.NgControlStatus, i10.NgModel, i11.Dropdown, i12.TabView, i12.TabPanel, i13.InputTextarea, i14.Calendar, i15.InputNumber, i16.PlanningRepasCreateAdminComponent],\n    encapsulation: 2\n  });\n  return PlanningExecutionCreateAdminComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}