{"ast":null,"code":"import { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = function (a1, a2, a3) {\n  return {\n    \"p-inputswitch p-component\": true,\n    \"p-inputswitch-checked\": a1,\n    \"p-disabled\": a2,\n    \"p-focus\": a3\n  };\n};\n\nconst INPUTSWITCH_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => InputSwitch),\n  multi: true\n};\nlet InputSwitch = /*#__PURE__*/(() => {\n  class InputSwitch {\n    constructor(cd) {\n      this.cd = cd;\n      this.onChange = new EventEmitter();\n      this.checked = false;\n      this.focused = false;\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n    }\n\n    onClick(event, cb) {\n      if (!this.disabled && !this.readonly) {\n        event.preventDefault();\n        this.toggle(event);\n        cb.focus();\n      }\n    }\n\n    onInputChange(event) {\n      if (!this.readonly) {\n        const inputChecked = event.target.checked;\n        this.updateModel(event, inputChecked);\n      }\n    }\n\n    toggle(event) {\n      this.updateModel(event, !this.checked);\n    }\n\n    updateModel(event, value) {\n      this.checked = value;\n      this.onModelChange(this.checked);\n      this.onChange.emit({\n        originalEvent: event,\n        checked: this.checked\n      });\n    }\n\n    onFocus(event) {\n      this.focused = true;\n    }\n\n    onBlur(event) {\n      this.focused = false;\n      this.onModelTouched();\n    }\n\n    writeValue(checked) {\n      this.checked = checked;\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n  }\n\n  InputSwitch.ɵfac = function InputSwitch_Factory(t) {\n    return new (t || InputSwitch)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  InputSwitch.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: InputSwitch,\n    selectors: [[\"p-inputSwitch\"]],\n    inputs: {\n      disabled: \"disabled\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      tabindex: \"tabindex\",\n      inputId: \"inputId\",\n      name: \"name\",\n      readonly: \"readonly\",\n      ariaLabelledBy: \"ariaLabelledBy\"\n    },\n    outputs: {\n      onChange: \"onChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([INPUTSWITCH_VALUE_ACCESSOR])],\n    decls: 5,\n    vars: 15,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", \"role\", \"switch\", 3, \"checked\", \"disabled\", \"change\", \"focus\", \"blur\"], [\"cb\", \"\"], [1, \"p-inputswitch-slider\"]],\n    template: function InputSwitch_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = ɵngcc0.ɵɵgetCurrentView();\n\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function InputSwitch_Template_div_click_0_listener($event) {\n          ɵngcc0.ɵɵrestoreView(_r1);\n\n          const _r0 = ɵngcc0.ɵɵreference(3);\n\n          return ɵngcc0.ɵɵresetView(ctx.onClick($event, _r0));\n        });\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"change\", function InputSwitch_Template_input_change_2_listener($event) {\n          return ctx.onInputChange($event);\n        })(\"focus\", function InputSwitch_Template_input_focus_2_listener($event) {\n          return ctx.onFocus($event);\n        })(\"blur\", function InputSwitch_Template_input_blur_2_listener($event) {\n          return ctx.onBlur($event);\n        });\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.styleClass);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(11, _c0, ctx.checked, ctx.disabled, ctx.focused))(\"ngStyle\", ctx.style);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"tabindex\", ctx.tabindex)(\"aria-checked\", ctx.checked)(\"aria-labelledby\", ctx.ariaLabelledBy);\n      }\n    },\n    dependencies: [ɵngcc1.NgClass, ɵngcc1.NgStyle],\n    styles: [\".p-inputswitch{-ms-user-select:none;-webkit-user-select:none;display:inline-block;position:relative;user-select:none}.p-inputswitch-slider{bottom:0;cursor:pointer;left:0;position:absolute;right:0;top:0}.p-inputswitch-slider:before{content:\\\"\\\";position:absolute;top:50%}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return InputSwitch;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet InputSwitchModule = /*#__PURE__*/(() => {\n  class InputSwitchModule {}\n\n  InputSwitchModule.ɵfac = function InputSwitchModule_Factory(t) {\n    return new (t || InputSwitchModule)();\n  };\n\n  InputSwitchModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: InputSwitchModule\n  });\n  InputSwitchModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return InputSwitchModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InputSwitchModule, {\n    declarations: function () {\n      return [InputSwitch];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [InputSwitch];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INPUTSWITCH_VALUE_ACCESSOR, InputSwitch, InputSwitchModule }; //# sourceMappingURL=primeng-inputswitch.js.map","map":null,"metadata":{},"sourceType":"module"}