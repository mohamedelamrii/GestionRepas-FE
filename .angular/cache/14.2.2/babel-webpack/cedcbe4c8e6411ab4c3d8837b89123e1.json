{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { User } from '../model/User.model';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./Token.service\";\nimport * as i3 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, tokenService, router) {\n      this.http = http;\n      this.tokenService = tokenService;\n      this.router = router;\n      this.API = environment.loginUrl;\n      this._user = new User();\n      this._authenticatedUser = new User();\n      this._authenticated = JSON.parse(localStorage.getItem('autenticated')) || false;\n      this._loggedIn = new BehaviorSubject(false);\n      this.loggedIn$ = this._loggedIn.asObservable();\n      this.error = null;\n    }\n\n    loginAdmin(username, password) {\n      this.http.post(this.API + 'login', {\n        username,\n        password\n      }, {\n        observe: 'response'\n      }).subscribe(resp => {\n        this.error = null;\n        const jwt = resp.headers.get('Authorization');\n        jwt != null ? this.tokenService.saveToken(jwt) : false;\n        this.loadInfos();\n        console.log('you are logged in successfully');\n        this.router.navigate(['/' + environment.rootAppUrl + '/admin']);\n      }, error => {\n        this.error = error.error;\n        console.log(error);\n      });\n    }\n\n    loginResponsable(username, password) {\n      this.http.post(this.API + 'login', {\n        username,\n        password\n      }, {\n        observe: 'response'\n      }).subscribe(resp => {\n        this.error = null;\n        const jwt = resp.headers.get('Authorization');\n        jwt != null ? this.tokenService.saveToken(jwt) : false;\n        this.loadInfos();\n        console.log('you are logged in successfully');\n        this.router.navigate(['/' + environment.rootAppUrl + '/responsable']);\n      }, error => {\n        this.error = error.error;\n        console.log(error);\n      });\n    }\n\n    loadInfos() {\n      const tokenDecoded = this.tokenService.decode();\n      const username = tokenDecoded.sub;\n      const roles = tokenDecoded.roles;\n      const email = tokenDecoded.email;\n      const prenom = tokenDecoded.prenom;\n      const nom = tokenDecoded.nom;\n      const passwordChanged = tokenDecoded.passwordChanged;\n      this._authenticatedUser.passwordChanged = passwordChanged;\n      this._authenticatedUser.username = username;\n      this._authenticatedUser.nom = nom;\n      this._authenticatedUser.prenom = prenom;\n      this._authenticatedUser.email = email;\n      this._authenticatedUser.roles = roles;\n      localStorage.setItem('autenticated', JSON.stringify(true));\n      this.authenticated = true;\n\n      this._loggedIn.next(true);\n    }\n\n    hasRole(role) {\n      const index = this._authenticatedUser.roles.findIndex(r => r.authority == role.authority);\n\n      return index > -1 ? true : false;\n    }\n\n    registerAdmin() {\n      console.log(this.user);\n      this.http.post(this.API + 'api/users/save', this.user, {\n        observe: 'response'\n      }).subscribe(resp => {\n        this.router.navigate(['admin/login']);\n      }, error => {\n        console.log(error.error);\n      });\n    }\n\n    registerResponsable() {\n      console.log(this.user);\n      this.http.post(this.API + 'api/users/save', this.user, {\n        observe: 'response'\n      }).subscribe(resp => {\n        this.router.navigate(['responsable/login']);\n      }, error => {\n        console.log(error.error);\n      });\n    }\n\n    logout() {\n      this.tokenService.removeToken();\n      localStorage.setItem('autenticated', JSON.stringify(false));\n      this.authenticated = false;\n\n      this._loggedIn.next(false);\n\n      this._authenticatedUser = new User();\n      this.router.navigate(['']);\n    }\n\n    get user() {\n      return this._user;\n    }\n\n    set user(value) {\n      this._user = value;\n    }\n\n    get authenticated() {\n      return this._authenticated;\n    }\n\n    set authenticated(value) {\n      this._authenticated = value;\n    }\n\n    get authenticatedUser() {\n      return this._authenticatedUser;\n    }\n\n    set authenticatedUser(value) {\n      this._authenticatedUser = value;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}