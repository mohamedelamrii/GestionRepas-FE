{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { PlanningExecutionDto } from '../model/PlanningExecution.model';\nimport { PlanningExecutionCriteria } from '../criteria/PlanningExecution.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./role.service\";\nexport let PlanningExecutionService = /*#__PURE__*/(() => {\n  class PlanningExecutionService {\n    constructor(http, roleService) {\n      this.http = http;\n      this.roleService = roleService;\n      this.API = '';\n      this.editPlanningExecution$ = new BehaviorSubject(false);\n      this.role$ = this.roleService.role$;\n      this.role$.subscribe(role => {\n        this.API = environment.apiUrl + role.toLowerCase() + '/planningExecution/';\n      });\n    }\n\n    findPaginatedByCriteria(criteria) {\n      return this.http.post(this.API + 'find-paginated-by-criteria', criteria);\n    }\n\n    findAll() {\n      return this.http.get(this.API);\n    }\n\n    save() {\n      return this.http.post(this.API, this.selectedPlanningExecution);\n    }\n\n    delete(planningExecution) {\n      return this.http.delete(this.API + 'id/' + planningExecution.id);\n    }\n\n    edit() {\n      return this.http.put(this.API, this.selectedPlanningExecution);\n    }\n\n    findByCriteria(planningExecution) {\n      return this.http.post(this.API + 'find-by-criteria', planningExecution);\n    }\n\n    findByIdWithAssociatedList(planningExecution) {\n      return this.http.get(this.API + 'id/' + planningExecution.id);\n    }\n\n    deleteMultiple() {\n      return this.http.post(this.API + 'multiple', this.planningExecutionSelections);\n    }\n\n    get planningExecutions() {\n      if (this._planningExecutions == null) {\n        this._planningExecutions = new Array();\n      }\n\n      return this._planningExecutions;\n    }\n\n    set planningExecutions(value) {\n      this._planningExecutions = value;\n    }\n\n    get selectedPlanningExecution() {\n      if (this._selectedPlanningExecution == null) {\n        this._selectedPlanningExecution = new PlanningExecutionDto();\n      }\n\n      return this._selectedPlanningExecution;\n    }\n\n    set selectedPlanningExecution(value) {\n      this._selectedPlanningExecution = value;\n    }\n\n    get planningExecutionSelections() {\n      if (this._planningExecutionSelections == null) {\n        this._planningExecutionSelections = new Array();\n      }\n\n      return this._planningExecutionSelections;\n    }\n\n    set planningExecutionSelections(value) {\n      this._planningExecutionSelections = value;\n    }\n\n    get createPlanningExecutionDialog() {\n      return this._createPlanningExecutionDialog;\n    }\n\n    set createPlanningExecutionDialog(value) {\n      this._createPlanningExecutionDialog = value;\n    }\n\n    get editPlanningExecutionDialog() {\n      return this._editPlanningExecutionDialog;\n    }\n\n    set editPlanningExecutionDialog(value) {\n      this._editPlanningExecutionDialog = value;\n    }\n\n    get viewPlanningExecutionDialog() {\n      return this._viewPlanningExecutionDialog;\n    }\n\n    set viewPlanningExecutionDialog(value) {\n      this._viewPlanningExecutionDialog = value;\n    }\n\n    get search() {\n      if (this._search == null) {\n        this._search = new PlanningExecutionCriteria();\n      }\n\n      return this._search;\n    }\n\n    set search(value) {\n      this._search = value;\n    }\n\n  }\n\n  PlanningExecutionService.ɵfac = function PlanningExecutionService_Factory(t) {\n    return new (t || PlanningExecutionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RoleService));\n  };\n\n  PlanningExecutionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlanningExecutionService,\n    factory: PlanningExecutionService.ɵfac,\n    providedIn: 'root'\n  });\n  return PlanningExecutionService;\n})();","map":null,"metadata":{},"sourceType":"module"}