{"ast":null,"code":"import { Directive, ElementRef, NgZone, Input, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport * as ɵngcc0 from '@angular/core';\nlet Password = /*#__PURE__*/(() => {\n  class Password {\n    constructor(el, zone) {\n      this.el = el;\n      this.zone = zone;\n      this.promptLabel = 'Enter a password';\n      this.weakLabel = 'Weak';\n      this.mediumLabel = 'Medium';\n      this.strongLabel = 'Strong';\n      this.feedback = true;\n    }\n\n    set showPassword(show) {\n      this.el.nativeElement.type = show ? 'text' : 'password';\n    }\n\n    ngDoCheck() {\n      this.updateFilledState();\n    }\n\n    onInput(e) {\n      this.updateFilledState();\n    }\n\n    updateFilledState() {\n      this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length;\n    }\n\n    createPanel() {\n      this.panel = document.createElement('div');\n      this.panel.className = 'p-password-panel p-component p-password-panel-overlay p-connected-overlay';\n      this.meter = document.createElement('div');\n      this.meter.className = 'p-password-meter';\n      this.info = document.createElement('div');\n      this.info.className = 'p-password-info';\n      this.info.textContent = this.promptLabel;\n      this.panel.appendChild(this.meter);\n      this.panel.appendChild(this.info);\n      this.panel.style.minWidth = DomHandler.getOuterWidth(this.el.nativeElement) + 'px';\n      document.body.appendChild(this.panel);\n    }\n\n    showOverlay() {\n      if (this.feedback) {\n        if (!this.panel) {\n          this.createPanel();\n        }\n\n        this.panel.style.zIndex = String(++DomHandler.zindex);\n        this.panel.style.display = 'block';\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            DomHandler.addClass(this.panel, 'p-connected-overlay-visible');\n            this.bindScrollListener();\n            this.bindDocumentResizeListener();\n          }, 1);\n        });\n        DomHandler.absolutePosition(this.panel, this.el.nativeElement);\n      }\n    }\n\n    hideOverlay() {\n      if (this.feedback && this.panel) {\n        DomHandler.addClass(this.panel, 'p-connected-overlay-hidden');\n        DomHandler.removeClass(this.panel, 'p-connected-overlay-visible');\n        this.unbindScrollListener();\n        this.unbindDocumentResizeListener();\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            this.ngOnDestroy();\n          }, 150);\n        });\n      }\n    }\n\n    onFocus() {\n      this.showOverlay();\n    }\n\n    onBlur() {\n      this.hideOverlay();\n    }\n\n    onKeyup(e) {\n      if (this.feedback) {\n        let value = e.target.value,\n            label = null,\n            meterPos = null;\n\n        if (value.length === 0) {\n          label = this.promptLabel;\n          meterPos = '0px 0px';\n        } else {\n          var score = this.testStrength(value);\n\n          if (score < 30) {\n            label = this.weakLabel;\n            meterPos = '0px -10px';\n          } else if (score >= 30 && score < 80) {\n            label = this.mediumLabel;\n            meterPos = '0px -20px';\n          } else if (score >= 80) {\n            label = this.strongLabel;\n            meterPos = '0px -30px';\n          }\n        }\n\n        if (!this.panel || !DomHandler.hasClass(this.panel, 'p-connected-overlay-visible')) {\n          this.showOverlay();\n        }\n\n        this.meter.style.backgroundPosition = meterPos;\n        this.info.textContent = label;\n      }\n    }\n\n    testStrength(str) {\n      let grade = 0;\n      let val;\n      val = str.match('[0-9]');\n      grade += this.normalize(val ? val.length : 1 / 4, 1) * 25;\n      val = str.match('[a-zA-Z]');\n      grade += this.normalize(val ? val.length : 1 / 2, 3) * 10;\n      val = str.match('[!@#$%^&*?_~.,;=]');\n      grade += this.normalize(val ? val.length : 1 / 6, 1) * 35;\n      val = str.match('[A-Z]');\n      grade += this.normalize(val ? val.length : 1 / 6, 1) * 30;\n      grade *= str.length / 8;\n      return grade > 100 ? 100 : grade;\n    }\n\n    normalize(x, y) {\n      let diff = x - y;\n      if (diff <= 0) return x / y;else return 1 + 0.5 * (x / (x + y / 4));\n    }\n\n    get disabled() {\n      return this.el.nativeElement.disabled;\n    }\n\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.el.nativeElement, () => {\n          if (DomHandler.hasClass(this.panel, 'p-connected-overlay-visible')) {\n            this.hideOverlay();\n          }\n        });\n      }\n\n      this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n\n    bindDocumentResizeListener() {\n      this.documentResizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        window.removeEventListener('resize', this.documentResizeListener);\n        this.documentResizeListener = null;\n      }\n    }\n\n    onWindowResize() {\n      this.hideOverlay();\n    }\n\n    ngOnDestroy() {\n      if (this.panel) {\n        if (this.scrollHandler) {\n          this.scrollHandler.destroy();\n          this.scrollHandler = null;\n        }\n\n        this.unbindDocumentResizeListener();\n        document.body.removeChild(this.panel);\n        this.panel = null;\n        this.meter = null;\n        this.info = null;\n      }\n    }\n\n  }\n\n  Password.ɵfac = function Password_Factory(t) {\n    return new (t || Password)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  Password.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: Password,\n    selectors: [[\"\", \"pPassword\", \"\"]],\n    hostVars: 6,\n    hostBindings: function Password_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function Password_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        })(\"focus\", function Password_focus_HostBindingHandler() {\n          return ctx.onFocus();\n        })(\"blur\", function Password_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        })(\"keyup\", function Password_keyup_HostBindingHandler($event) {\n          return ctx.onKeyup($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"p-inputtext\", true)(\"p-component\", true)(\"p-filled\", ctx.filled);\n      }\n    },\n    inputs: {\n      promptLabel: \"promptLabel\",\n      weakLabel: \"weakLabel\",\n      mediumLabel: \"mediumLabel\",\n      strongLabel: \"strongLabel\",\n      feedback: \"feedback\",\n      showPassword: \"showPassword\"\n    }\n  });\n  return Password;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PasswordModule = /*#__PURE__*/(() => {\n  class PasswordModule {}\n\n  PasswordModule.ɵfac = function PasswordModule_Factory(t) {\n    return new (t || PasswordModule)();\n  };\n\n  PasswordModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PasswordModule\n  });\n  PasswordModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return PasswordModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PasswordModule, {\n    declarations: function () {\n      return [Password];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [Password];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Password, PasswordModule }; //# sourceMappingURL=primeng-password.js.map","map":null,"metadata":{},"sourceType":"module"}