{"ast":null,"code":"import { User } from '../model/User.model';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http; // declarations\n\n      this.API = environment.apiUrl;\n      this._users = [];\n      this._selectedUsers = [];\n      this._userDialog = false;\n      this._user = new User();\n    } // methods\n\n\n    findAll() {\n      this.http.get(this.API).subscribe(users => {\n        this._users = users;\n      }, error => {\n        console.log(error.error);\n      });\n    }\n\n    save(user) {\n      this.http.post(this.API + \"save\", user).subscribe(user => {\n        this._users = [...this._users, user];\n      }, error => {\n        console.log(error.error);\n      });\n    }\n\n    update(user) {\n      this.http.put(this.API, user).subscribe(user => {\n        const index = this._users.findIndex(userToBeFound => user.id == userToBeFound.id);\n\n        index > -1 ? this._users[index] = user : false;\n        console.log(\"updated User\");\n        console.log(user);\n        console.log(\"hiwa hiwa\");\n      }, error => {\n        console.log(error.error);\n      });\n    }\n\n    delete(id) {\n      this.http.delete(this.API + \"id/\" + id).subscribe(res => {\n        res == 1 ? this._users = this._users.filter(user => user.id != id) : false;\n      });\n    } // getters and setters \n\n\n    get users() {\n      return this._users;\n    }\n\n    set users(users) {\n      this._users = users;\n    }\n\n    get selectedUsers() {\n      return this._users;\n    }\n\n    set selectedUsers(selectedUsers) {\n      this._selectedUsers = selectedUsers;\n    }\n\n    get userDialog() {\n      return this._userDialog;\n    }\n\n    set userDialog(userDialog) {\n      this._userDialog = userDialog;\n    }\n\n    get user() {\n      return this._user;\n    }\n\n    set user(user) {\n      this._user = user;\n    }\n\n    get submitted() {\n      return this._submitted;\n    }\n\n    set submitted(submitted) {\n      this._submitted = submitted;\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}