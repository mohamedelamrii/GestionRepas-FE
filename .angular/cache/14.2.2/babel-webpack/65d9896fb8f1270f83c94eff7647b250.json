{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { PatientDto } from '../model/Patient.model';\nimport { PatientCriteria } from '../criteria/Patient.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./role.service\";\nexport let PatientService = /*#__PURE__*/(() => {\n  class PatientService {\n    constructor(http, roleService) {\n      this.http = http;\n      this.roleService = roleService;\n      this.API = '';\n      this.editPatient$ = new BehaviorSubject(false);\n      this.role$ = this.roleService.role$;\n      this.role$.subscribe(role => {\n        this.API = environment.apiUrl + role.toLowerCase() + '/patient/';\n      });\n    }\n\n    findPaginatedByCriteria(criteria) {\n      return this.http.post(this.API + 'find-paginated-by-criteria', criteria);\n    }\n\n    findAll() {\n      return this.http.get(this.API);\n    }\n\n    save() {\n      return this.http.post(this.API, this.selectedPatient);\n    }\n\n    delete(patient) {\n      return this.http.delete(this.API + 'id/' + patient.id);\n    }\n\n    edit() {\n      return this.http.put(this.API, this.selectedPatient);\n    }\n\n    findByCriteria(patient) {\n      return this.http.post(this.API + 'find-by-criteria', patient);\n    }\n\n    findByIdWithAssociatedList(patient) {\n      return this.http.get(this.API + 'id/' + patient.id);\n    }\n\n    deleteMultiple() {\n      return this.http.post(this.API + 'multiple', this.patientSelections);\n    }\n\n    get patients() {\n      if (this._patients == null) {\n        this._patients = new Array();\n      }\n\n      return this._patients;\n    }\n\n    set patients(value) {\n      this._patients = value;\n    }\n\n    get selectedPatient() {\n      if (this._selectedPatient == null) {\n        this._selectedPatient = new PatientDto();\n      }\n\n      return this._selectedPatient;\n    }\n\n    set selectedPatient(value) {\n      this._selectedPatient = value;\n    }\n\n    get patientSelections() {\n      if (this._patientSelections == null) {\n        this._patientSelections = new Array();\n      }\n\n      return this._patientSelections;\n    }\n\n    set patientSelections(value) {\n      this._patientSelections = value;\n    }\n\n    get createPatientDialog() {\n      return this._createPatientDialog;\n    }\n\n    set createPatientDialog(value) {\n      this._createPatientDialog = value;\n    }\n\n    get editPatientDialog() {\n      return this._editPatientDialog;\n    }\n\n    set editPatientDialog(value) {\n      this._editPatientDialog = value;\n    }\n\n    get viewPatientDialog() {\n      return this._viewPatientDialog;\n    }\n\n    set viewPatientDialog(value) {\n      this._viewPatientDialog = value;\n    }\n\n    get search() {\n      if (this._search == null) {\n        this._search = new PatientCriteria();\n      }\n\n      return this._search;\n    }\n\n    set search(value) {\n      this._search = value;\n    }\n\n  }\n\n  PatientService.ɵfac = function PatientService_Factory(t) {\n    return new (t || PatientService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RoleService));\n  };\n\n  PatientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PatientService,\n    factory: PatientService.ɵfac,\n    providedIn: 'root'\n  });\n  return PatientService;\n})();","map":null,"metadata":{},"sourceType":"module"}