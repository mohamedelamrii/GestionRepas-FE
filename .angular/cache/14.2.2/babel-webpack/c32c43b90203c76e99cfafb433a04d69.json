{"ast":null,"code":"import jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { saveAs } from 'file-saver';\nimport { Workbook } from 'exceljs/dist/exceljs.min.js';\nimport * as i0 from \"@angular/core\";\nexport let ExportService = /*#__PURE__*/(() => {\n  class ExportService {\n    constructor() {}\n\n    exporterExcel(criteriaData, exportData, filename) {\n      //Excel Title, Header, Data\n      const title = filename;\n      const header = Object.keys(exportData[0]);\n      const data = exportData; //Create workbook and worksheet\n\n      let workbook = new Workbook();\n      let worksheet = workbook.addWorksheet('liste des ' + filename); //Add criteria title \n\n      let titleRowCR = worksheet.addRow(['CritÃ¨res']);\n      titleRowCR.font = {\n        name: 'Calibri',\n        family: 4,\n        size: 14,\n        underline: 'single',\n        bold: true\n      };\n      worksheet.addRow([]);\n      const headerCr = Object.keys(criteriaData[0]);\n      let headerRowCr = worksheet.addRow(headerCr); // Cell Style : Fill and Border\n\n      headerRowCr.eachCell((cell, number) => {\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: {\n            argb: '03FCF4'\n          }\n        };\n        cell.border = {\n          top: {\n            style: 'thin'\n          },\n          left: {\n            style: 'thin'\n          },\n          bottom: {\n            style: 'thin'\n          },\n          right: {\n            style: 'thin'\n          }\n        };\n      });\n      criteriaData.forEach(d => {\n        let row = worksheet.addRow(Object.values(d));\n      }); //Add Row and formatting\n\n      worksheet.addRow([]);\n      let titleRow = worksheet.addRow([title]);\n      titleRow.font = {\n        name: 'Calibri',\n        family: 4,\n        size: 14,\n        underline: 'single',\n        bold: true\n      }; // let subTitleRow = worksheet.addRow(['Date : ' + this.datePipe.transform(new Date(), 'medium')])\n      // worksheet.mergeCells('A1:D2');\n      //Blank Row \n\n      worksheet.addRow([]); //Add Header Row\n\n      let headerRow = worksheet.addRow(header); // Cell Style : Fill and Border\n\n      headerRow.eachCell((cell, number) => {\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: {\n            argb: '03FCF4'\n          }\n        };\n        cell.border = {\n          top: {\n            style: 'thin'\n          },\n          left: {\n            style: 'thin'\n          },\n          bottom: {\n            style: 'thin'\n          },\n          right: {\n            style: 'thin'\n          }\n        };\n      }); // worksheet.addRows(data);\n      // Add Data and Conditional Formatting\n\n      data.forEach(d => {\n        let row = worksheet.addRow(Object.values(d));\n      });\n\n      for (let i = 1; i <= header.length; i++) {\n        worksheet.getColumn(i).width = 36;\n      }\n\n      worksheet.addRow([]); //Footer Row\n\n      let footerRow = worksheet.addRow(['Description']);\n      footerRow.getCell(1).fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: {\n          argb: 'FFCCFFE5'\n        }\n      }; //footerRow.getCell(1).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }\n      //Merge Cells\n      // worksheet.mergeCells(`A${footerRow.number}:F${footerRow.number}`);\n      //Generate Excel File with given name\n\n      workbook.xlsx.writeBuffer().then(data => {\n        this.saveAsExcelFile(data, filename);\n      });\n    }\n\n    exportCustomizeExcel(compagneData, distinctionsData, boursesData, gestionEquipeData, filename) {\n      //Excel Title, Header, Data\n      const title = filename; //Create workbook and worksheet\n\n      let workbook = new Workbook();\n      let worksheet = workbook.addWorksheet('liste des ' + filename);\n      let worksheetDistinctions = workbook.addWorksheet('liste des distinctions');\n      let worksheetBourses = workbook.addWorksheet('liste des bourses');\n      let worksheetGestionEquipes = workbook.addWorksheet('liste des equipes'); //Add criteria title \n\n      let titleRowCR = worksheet.addRow(['Compagne ']);\n      titleRowCR.font = {\n        name: 'Calibri',\n        family: 4,\n        size: 14,\n        underline: 'single',\n        bold: true\n      };\n      worksheet.addRow([]);\n      const headerCr = Object.keys(compagneData[0]);\n      let headerRowCr = worksheet.addRow(headerCr); // Cell Style : Fill and Border\n\n      headerRowCr.eachCell((cell, number) => {\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: {\n            argb: '03FCF4'\n          }\n        };\n        cell.border = {\n          top: {\n            style: 'thin'\n          },\n          left: {\n            style: 'thin'\n          },\n          bottom: {\n            style: 'thin'\n          },\n          right: {\n            style: 'thin'\n          }\n        };\n      });\n      compagneData.forEach(d => {\n        let row = worksheet.addRow(Object.values(d));\n      }); //Add Row and formatting\n\n      worksheet.addRow([]);\n      let titleRow = worksheetDistinctions.addRow(['Distinction ']);\n      titleRow.font = {\n        name: 'Calibri',\n        family: 4,\n        size: 14,\n        underline: 'single',\n        bold: true\n      };\n      let titleRowBourse = worksheetBourses.addRow(['Bourses ']);\n      titleRowBourse.font = {\n        name: 'Calibri',\n        family: 4,\n        size: 14,\n        underline: 'single',\n        bold: true\n      };\n      let titleRowGestionEquipe = worksheetGestionEquipes.addRow(['Gestion Equipes ']);\n      titleRowGestionEquipe.font = {\n        name: 'Calibri',\n        family: 4,\n        size: 14,\n        underline: 'single',\n        bold: true\n      }; // let subTitleRow = worksheet.addRow(['Date : ' + this.datePipe.transform(new Date(), 'medium')])\n      // worksheet.mergeCells('A1:D2');\n      //Blank Row \n\n      worksheetDistinctions.addRow([]);\n      worksheetBourses.addRow([]);\n      worksheetGestionEquipes.addRow([]); //Add Header Row\n\n      let headerRow = worksheetDistinctions.addRow(Object.keys(distinctionsData[0])); // Cell Style : Fill and Border\n\n      headerRow.eachCell((cell, number) => {\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: {\n            argb: '03FCF4'\n          }\n        };\n        cell.border = {\n          top: {\n            style: 'thin'\n          },\n          left: {\n            style: 'thin'\n          },\n          bottom: {\n            style: 'thin'\n          },\n          right: {\n            style: 'thin'\n          }\n        };\n      }); // worksheet.addRows(data);\n      // Add Data and Conditional Formatting\n\n      distinctionsData.forEach(d => {\n        let row = worksheetDistinctions.addRow(Object.values(d));\n      });\n\n      for (let i = 1; i <= Object.keys(distinctionsData[0]).length; i++) {\n        worksheetDistinctions.getColumn(i).width = 36;\n      }\n\n      worksheetDistinctions.addRow([]);\n\n      if (boursesData.length > 0) {\n        //Add Header Row\n        let headerBoursesRow = worksheetBourses.addRow(Object.keys(boursesData[0])); // Cell Style : Fill and Border\n\n        headerBoursesRow.eachCell((cell, number) => {\n          cell.fill = {\n            type: 'pattern',\n            pattern: 'solid',\n            fgColor: {\n              argb: '03FCF4'\n            }\n          };\n          cell.border = {\n            top: {\n              style: 'thin'\n            },\n            left: {\n              style: 'thin'\n            },\n            bottom: {\n              style: 'thin'\n            },\n            right: {\n              style: 'thin'\n            }\n          };\n        }); // worksheet.addRows(data);\n        // Add Data and Conditional Formatting\n\n        boursesData.forEach(d => {\n          let row = worksheetBourses.addRow(Object.values(d));\n        });\n\n        for (let i = 1; i <= Object.keys(boursesData[0]).length; i++) {\n          worksheetBourses.getColumn(i).width = 36;\n        }\n\n        worksheetBourses.addRow([]);\n      }\n\n      if (gestionEquipeData.length > 0) {\n        //Add Header Row\n        let headerGestionEquipesRow = worksheetGestionEquipes.addRow(Object.keys(gestionEquipeData[0])); // Cell Style : Fill and Border\n\n        headerGestionEquipesRow.eachCell((cell, number) => {\n          cell.fill = {\n            type: 'pattern',\n            pattern: 'solid',\n            fgColor: {\n              argb: '03FCF4'\n            }\n          };\n          cell.border = {\n            top: {\n              style: 'thin'\n            },\n            left: {\n              style: 'thin'\n            },\n            bottom: {\n              style: 'thin'\n            },\n            right: {\n              style: 'thin'\n            }\n          };\n        }); // worksheet.addRows(data);\n        // Add Data and Conditional Formatting\n\n        gestionEquipeData.forEach(d => {\n          let row = worksheetGestionEquipes.addRow(Object.values(d));\n        });\n\n        for (let i = 1; i <= Object.keys(gestionEquipeData[0]).length; i++) {\n          worksheetGestionEquipes.getColumn(i).width = 36;\n        }\n\n        worksheetGestionEquipes.addRow([]);\n      } //Footer Row\n\n\n      let footerRow = worksheet.addRow(['Description']);\n      footerRow.getCell(1).fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: {\n          argb: 'FFCCFFE5'\n        }\n      }; //footerRow.getCell(1).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }\n      //Merge Cells\n      // worksheet.mergeCells(`A${footerRow.number}:F${footerRow.number}`);\n      //Generate Excel File with given name\n\n      workbook.xlsx.writeBuffer().then(data => {\n        this.saveAsExcelFile(data, filename);\n      });\n    }\n\n    saveAsExcelFile(buffer, fileName) {\n      import('file-saver').then(FileSaver => {\n        const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const data = new Blob([buffer], {\n          type: EXCEL_TYPE\n        });\n        FileSaver.saveAs(data, fileName + '.xlsx');\n      });\n    }\n\n    exporterPdf(criteriaData, exportData, filename) {\n      const doc = new jsPDF();\n      let columnsCriteria = [];\n      let columnsData = [];\n      Object.keys(criteriaData[0]).forEach(e => {\n        let headerObject = {};\n        headerObject.header = e;\n        headerObject.dataKey = e;\n        columnsCriteria.push(headerObject);\n      });\n      Object.keys(exportData[0]).forEach(e => {\n        let headerData = {};\n        headerData.header = e;\n        headerData.dataKey = e;\n        columnsData.push(headerData);\n      });\n      autoTable(doc, {\n        columns: columnsCriteria,\n        body: criteriaData,\n        startY: 25,\n        margin: {\n          horizontal: 10\n        },\n        styles: {\n          overflow: \"linebreak\",\n          fontSize: 5\n        },\n        bodyStyles: {\n          valign: \"top\"\n        },\n        theme: \"striped\",\n        showHead: \"everyPage\",\n        didDrawPage: function (data) {\n          // Header\n          doc.setFontSize(10);\n          doc.setTextColor(40);\n          doc.text(\"CritÃ¨res :\", data.settings.margin.left, 22);\n        }\n      });\n      autoTable(doc, {\n        columns: columnsData,\n        body: exportData,\n        startY: 41,\n        margin: {\n          horizontal: 10\n        },\n        styles: {\n          overflow: \"linebreak\",\n          fontSize: 5\n        },\n        bodyStyles: {\n          valign: \"top\"\n        },\n        theme: \"striped\",\n        showHead: \"everyPage\",\n        didDrawPage: function (data) {\n          // Header\n          doc.setFontSize(10);\n          doc.setTextColor(40);\n          doc.text(\"Liste des \" + filename, data.settings.margin.left, 40);\n        }\n      });\n      doc.save(filename + '.pdf');\n    }\n\n    exporterCSV(criteriaData, exportData, filename) {\n      const replacer = (key, value) => value === null ? '' : value; // specify how you want to handle null values here\n\n\n      const headerCr = Object.keys(criteriaData[0]);\n      const header = Object.keys(exportData[0]);\n      let csvCr = criteriaData.map(row => headerCr.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(';'));\n      csvCr.unshift(headerCr.join(';'));\n      let csvCrArray = csvCr.join('\\r\\n');\n      let csv = exportData.map(row => header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(';'));\n      csv.unshift(header.join(';'));\n      let csvArray = csv.join('\\r\\n');\n      var blob = new Blob([csvCrArray, '\\n', '\\n', csvArray], {\n        type: 'text/csv'\n      });\n      saveAs(blob, filename + \".csv\");\n    }\n\n  }\n\n  ExportService.Éµfac = function ExportService_Factory(t) {\n    return new (t || ExportService)();\n  };\n\n  ExportService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: ExportService,\n    factory: ExportService.Éµfac,\n    providedIn: 'root'\n  });\n  return ExportService;\n})();","map":null,"metadata":{},"sourceType":"module"}